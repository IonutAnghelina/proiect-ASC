import math
import pylab

def getFrequencies(text):
    dict={}

    for ch in text:
        if ch in dict.keys():
            dict[ch]+=1
        else:
            dict[ch]=1

    return dict,len(text)

def solve_One_Blocks(D,totalSize):

    entropy=0

    for ch in D.keys():


        p=D[ch]/totalSize


        entropy+=p*math.log2(1/p)
    return entropy


def hash1(word):
    sol=0
    p=67
    mod=(1e9)+7

    for letter in word:
        sol=(sol*p+ord(letter))%mod

    return sol

def hash2(word):
    sol=0
    p=71
    mod=666013

    for letter in word:
        sol=(sol*p+ord(letter))%mod

    return sol

def solve_big_blocks(text,maxN):

    maxN=min(maxN,len(text)-1) #Nu luam cuvinte de lungime mai mare decat textul

    D,totalsize=getFrequencies(text) #Dictionarul cu frecventele literelor si lungimea textului

    #print(D)

    F=[0]*(maxN+5) #Sirul in care vom calcula aproximarile pentru entropie
    k=[0]*(maxN+5)

    F[1]=solve_One_Blocks(D,totalsize) #Solutia pentru litere
    k[1]=F[1] #Formula generala va fi F[i]=-k[i-1]+Entropia dupa formula elementara pt cuvinte de lungime i


    F[0]=math.log2(31) #Prin conventie, F[0] este entropia maxim posibila, anume log2(sigma)


    l=len(text)


    for i in range(2,maxN+1):
        #lastdict=D
        F[i]=0

        D.clear()

        totalWords=l-i+1

        for j in range(0,l-i+1):
            word=text[j:j+i]

            h1=hash1(word)
            h2=hash2(word)
            if (h1,h2) in D:
                D[(h1,h2)]+=1
            else:
                D[(h1,h2)]=1

        for wordhash in D.keys():
           # print("{} {}".format(D[wordhash],totalWords))

            pword=D[wordhash]/totalWords

            F[i]-=pword*math.log2(pword)

        k[i]=F[i]

        F[i]-=k[i-1]


    return F

def plot(l):
    leng=len(l)

    idx=[]

    print(l)

    for i in range(1,leng):
        idx.append(i)



    pylab.plot(idx,l[1:])

    pylab.show()

text="Afostodatacanpovestiafostcaniciodatadinrudemariimparatestiopreafrumoasafatasieraunalaparintisimandrantoatecelecumefecioaraintresfintisilunaintrestele" #example
l=solve_big_blocks(text,100)

while l[-1]<=0: #Sirul F[n] va atinge 0, apoi va tinde asimptotic la 0, deci trebuie sa gasim ultima valoare pozitiva pe care o putem calcula
    l.pop()


plot(l)

Nz=len(l) #Punctul cel mai apropiat de 0

Hl=l[-1]/Nz #"Derivata" entropiei in Nz


print("Valoarea maxima a entropiei este: {}".format(l[0]))
print("Valoarea entropiei calculata doar pe baza literelor este: {}".format(l[1]))
print("Valoarea estimata a entropiei este: {}".format(l[-1]))
print("Redundanta textului din input este: {}%".format(100*(1-Hl/l[0])))




